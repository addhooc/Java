						+===================+
						+	Colecciones		+
						+===================+

Son almacenes dinámicos de Objetos.
No se puede almacenar tipos de datos primarios.
Pueden cambiar de tamaño dinámicamente (a diferencia de los arrays)
Pueden ir provistas de ordenamiento
Se puede insertar y eliminar elementos

			 ---------  <COLLECTION>  --------
			|				 |				  |
		  <SET>			   <LIST>		   <QUEUE>		<MAP>
			|											  |
		<SORTEDSET>     								<SORTEDMAP>
		
Nota: Cuantas más funcionalidades ofrece una colección, menos eficiente será.
	  Un Set permite hacer menos cosas que un List, no obstante el primero es mucho más eficiente. 
		

Descripciones:
-------------
		
		SET: Admite objetos que no estén repetidos -> titulares de una cuenta corriente
				No interesa que estén ordenados.
		
		LIST: Admite valores repetidos.
				Objetos que pueden estar repetidos. Están indexados: obj 1, obj 2, obj 3, ...
				Ofrece acceso aleatorio: acceder al elemento por su índice.
				
		QUEUE: Cola. Solo se puede acceder al primero o al último objeto, o a ambos.
				Según salen objetos por detrás o delante, se van agregando objetos.
				
		MAP: Permite crear colección de elementos repetidos indexdos por clave única arbitraria.
				Se identifica cada elemento con una clave que no tiene por qué ser un número.
				"elem1" (un String) identidfica a obj1
				"elem2" (un String) identifica a obj2
				
				
								+===========+
								+	LIST	+
								+===========+
								
Collection <I>
	List <I>
		ArrayList (C)
		LinkedList (C)
		Vector (C)
		CopyOnWriteArrayList (C)

Ventajas: 
	Acceso aleatorio (según índice)
	Están ordenadas (collection.sort())
	Añadir / eliminar sin restricción
	ListIterator modifica la ordenación en cualquier dirección.
	Sintaxis similar a Arrays

Desventajas:
	Tienen un bajo rendimiento en operaciones concretas
	que se resolverían con otras estructuras.
	

ARRAYLIST: Es muy rápido el acceso a sus elementos. Por ello, si se va a leer muchas veces
			los elementos, es conveniente el uso de un ArrayList.

LINKEDLIST: Gran eficiencia agregando y eliminando elementos. Pero no leyendo.
				Por ello, si la idea es agregar o eliminar siempre muchos elementos, pero no leerlos,
				puede ser conveniente utilizar un LinkedList.
				
VECTOR: Obsoleta. Se utilizaba en Programación Concurrente.

COPYONWRITEARRAYLIST: Utilizada en programas Concurrentes.
						Eficiente en operaciones de lectura, pero muy poco eficiente en operaciones de 
						escritura.
			
								
								+===============+
								+	LinkedList  +
								+	   vs       +
								+	ArrayList	+
								+===============+
								
Si se implementa un ArrayList y se elimina un elemento, se está obligado a reemplazar
su espacio con otro elemento. Ello obliga a mover todos los elementos.
En cuanto a eficiencia, un ArrayList implementado en situaciones en las que contínuamente vamos
a eliminar elementos: es muy poco eficiente.

Todo lo contrario ocurre con las listas enlazadas. Cada elemento contiene dos nodos
que apuntan tanto al elemento anterior como al siguiente.
Al eliminar un elemento, los nodos de los elementos anterior y posterior se enlazan,
continuando así enlazada la lista.

En cuanto a eficiencia, una LinkedList es mucho mejor en situaciones en las que es necesario
eliminar o actualizar elementos con gran frecuencia.

Es importante destacar que los elementos que se agregan a una LinkedList se agregan, por defecto,
siempre al final de la lista. también es osible agregarlo en otra posición (aunque esto suele
hacerse con iteradores).

Conviene destacar que para iterar una lista enlazada de manera efectiva, es coneniente
valerse del método | ListIterator |, el cual provee mucohos más métodos que un Iterator.
En definitiva un ListIterator permite recorrer la LinkedList hacia adelante, hacia atrás,
detenerme en un elemento, moverlo, eliminarlo, etc. En definitiva, interactuar con él.

+===============+
+	IMPORTANTE	+
+===============+

Un ListIterator se encuentra "fuera" de la Lista antes de recorrerla, cuando lo inicializamos.
Por ejemplo:

itCapitales = capitales.listIterator(); -> iterador inicializado. Está fuera de la lista.


						ITERADOR hasNext() -> true -> next() -> salta a linea entre 1 y 2
						--------
						+	   +
						+	1  +
						+	   +
						-------- -> hasNext() -> true -> next() -> salta a linea entre 2 y 3
						+	   +
						+	2  +
						+	   +
						-------- -> next()
						+	   +
						+	3  +
						+	   +
						--------

Se le pide comprobar si hay un siguiente elemento. Si la lista no está vacía, lo habrá.
Al indicarle next() -> el iterador salta a la "línea divisoria" entre el elemento 1 y 2.
Como ha saltado "por encima" del elemento 1, al decirle remove() lo que hace es remover el elemento que
se ha altado -> en este caso el 1.

		while(itCapitales.hasNext()){
			itCapitales.next();
			if(itCapitales.hasNext()){
				itCapitales.next();
				itCapitales.remove();
			}
		
		}
		
Este código remueve las posiciones pares, ya que se le indica saltar dos veces
siempre que haya un próximo elemento.
		
		
								+=============+
								+	TREESET	  +
								+=============+
								
Luego de haber utiliizado HashSet, se ha visto que no es posible mantener los elementos ordenandos.
Esto puede hacerse con un TreeSet. Un TreeSet es ordenado, pero, eso sí, es poco eficiente.

La colección TreeSet utiliza la interfaz del tipo de objeto que almacena en su interior
para compararlos entre sí y, de ese modo, ordenarlos.
En este caso de ejemmplo tenemos un TreeSet cuyo objeto genérico es String. La clase String impementa
la interfaz Comparable. En la API de Java poodemos ver que la interfaz Comparable
tiene el método compareTo mediante el cual compara los objtos de la Clase genérica, en este caso String.

+=============+
+ IMPORTANTE  +
+=============+

Si creo un TreeSet cuyo parámetro genérico sea una clase creada por mí,
es necesario implementar la interfaz Comparable en mi clase y sobreescribir el método compareTo()

		public class MiClase impements Comparable{

			// code
			
			@override
			int compareTo(T o){
				//code
			}
	
		}

Constructor con Comparator:

Si la Clase de los objetos que guardamos dentro del TreeSet no implenta la interfaz Comparable,
es necesario utilizar otro contructor para poder ordenar nuestro TreeSet.
Se trata de un constructor que recibe por parámetro un Comparator.
¿Qué es comparator? Se trata de una Interfaz que tiene un método llamado compare(T o1, T o2) 
-no confundir con compareTo-. Así que, si no implementamos la interfaz Comparable, igualmente
estaremos implementando la interfaz Comparator. (Más adelante veremos cómo evitar estas implementaciones
mediante la construcción de una inner class o clase interna.)

compare(T o1, T o2)
Parameters:
    o1 - the first object to be compared.
    o2 - the second object to be compared.
Returns:
    a negative integer, zero, 
    or a positive integer as the first argument is less than, equal to, or greater than the second.

Constructor:
TreeSet(Comparator<? super E> comparator)
-- Constructs a new, empty tree set, sorted according to the specified comparator --.


+=============+
+ IMPORTANTE  +
+=============+

// En caso de que la Clase artículo ya esté creada y queramos hacer un comparador
// creamos una inner class que impelemnte Comparator, cuyo tipo genérico será la clase en cuestión
// Luego de ello se instancia un objeto de ComparadorDeArticulos y se utiliza su método compare.
//
// ComparadorDeArticulos compara_art = new ComparadorDeArticulos();
//
// Luego utilizamos el constructor de TreeSet que recibe como parámetro un comparador.
//
// TreeSet<ComparadorDeArticulos> treeComparador = new TreeSet<ComparadorDeArticulos>(compara_art);
//
// Luego:
//			treeComparador.add(primero);
//			treeComparador.add(quinto);
//			etc...

class ComparadorDeArticulos implements Comparator<Articulo>{

	@Override
	public int compare(Articulo art1, Articulo art2) {
		String descripcionArt1 = art1.getDescripcion();
		String descripcionArt2 = art2.getDescripcion();
		
		return descripcionArt1.compareTo(descripcionArt2);
	}
	
}

A modo de step by step:

1-. Crear una inner Class (o una class) que implemente Comparable
2.- Sobreescribir el método compare con el criterio necesario
3.- Instanciar objeto de la inner class (por su naturaleza de interfaz, hará de comparador)
3.- Implementar un TreeSet con su constructor que recibe como parámetro un objeto de tipo Comparable
4.- El antes construido objeto es el parámetro pasado.


+================+
+  Otro camino   +
+================+

Eta es otra manera de hacerlo, con la cual nos evitamos crear otra clase.
Utilizamos una clase anónima dentro del TreeSet.

	TreeSet<Articulo> comparadorConClaseAnonima = new TreeSet<Articulo>(new Comparator<Articulo>()){
			public int compare(Articulo art1, Articulo art2) {
			String descripcionArt1 = art1.getDescripcion();
			String descripcionArt2 = art2.getDescripcion();
		
			return descripcionArt1.compareTo(descripcionArt2);
		}
	}
	
	comparadorConClaseAnonima.add(primero);
	...
	...
	
Esto sustituye a:

-- Crear una clase interna que implemente Comparator.
-- sobreerscribir allí el método compare.
-- Instanciar un objeto de dicha clase.
-- Luego crear un TreeSet con constructor que recibe un Comparador como parámetro.












